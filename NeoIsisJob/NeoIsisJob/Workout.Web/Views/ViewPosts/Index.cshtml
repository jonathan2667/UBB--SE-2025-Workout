@model List<Post>
@using Workout.Core.IRepositories
@using Workout.Core.IServices
@using Workout.Core.Models
@using Workout.Core.Enums
@inject IReactionRepository ReactionRepository
@inject ICommentService CommentService
@inject IUserRepo UserRepository
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "All Posts";

    int page = Context.Request.Query["page"].Count > 0 ? int.Parse(Context.Request.Query["page"]) : 1;
    int pageSize = 6;
    var pagedPosts = Model.OrderByDescending(p => p.Id).Skip((page - 1) * pageSize).Take(pageSize).ToList();
    int totalPages = (int)Math.Ceiling(Model.Count / (double)pageSize);

    string? userIdString = HttpContextAccessor.HttpContext?.Session.GetString("UserId");
    int.TryParse(userIdString, out int userId);
}

@Html.AntiForgeryToken()

<!-- Modern Top Bar -->
<div style="
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #fff;
    border-bottom: 1px solid #e5e7eb;
    padding: 18px 40px;
    font-family: 'Segoe UI', 'Inter', Arial, sans-serif;
    font-size: 1.08em;
    color: #222;
">
    <div style="display: flex; align-items: center; gap: 32px;">
        <a href="/posts" style="text-decoration: none; color: #222; font-weight: 600;">Home</a>
        <a href="/groups" style="text-decoration: none; color: #222; font-weight: 600;">Groups</a>
        <a href="/Follow" style="text-decoration: none; color: #222; font-weight: 600;">See Users</a>
    </div>
    <a href="/posts/create"
       style="
           background: #2563eb;
           color: #fff;
           border-radius: 8px;
           padding: 10px 24px;
           font-weight: 600;
           text-decoration: none;
           box-shadow: 0 1px 2px rgba(37,99,235,0.07);
           transition: background 0.2s;
       "
       onmouseover="this.style.background='#1d4ed8'"
       onmouseout="this.style.background='#2563eb'"
    >+ Create Post</a>
</div>

<div style="display: flex; justify-content: center; margin-top: 30px;">
    <div style="width: 600px;">
        @foreach (var post in pagedPosts)
        {
            var tagColor = post.Tag switch
            {
                PostTag.Food => "#FFA500",
                PostTag.Workout => "#90EE90",
                _ => "#393e46"
            };

            var reactions = ReactionRepository.GetReactionsByPostId(post.Id);
            int likeCount = reactions.Count(r => r.Type == ReactionType.Like);
            int loveCount = reactions.Count(r => r.Type == ReactionType.Love);
            int laughCount = reactions.Count(r => r.Type == ReactionType.Laugh);
            int angerCount = reactions.Count(r => r.Type == ReactionType.Anger);
            var userReaction = ReactionRepository.GetReaction(userId, post.Id);

            var comments = CommentService.GetCommentsByPostId(post.Id);
            var postAuthor = UserRepository.GetUserByIdAsync(post.UserId);
        <div style="background-color: @tagColor; padding: 15px 20px; border-radius: 10px; margin-bottom: 20px; color: black; position: relative;">
            <div style="display: flex; justify-content: space-between;">
                <h4>@postAuthor.Result.Username</h4>
                <span style="background-color: white; padding: 2px 10px; border-radius: 12px;">@post.Visibility</span>
            </div>

            <p style="margin: 10px 0; background-color: #f5f5f5; padding: 10px; border-radius: 6px;">@post.Content</p>

            <!-- Reactions -->
            <div style="display: flex; gap: 15px; align-items: center;">
                @foreach (var type in Enum.GetValues(typeof(ReactionType)).Cast<ReactionType>())
                {
                    var count = type switch
                    {
                        ReactionType.Like => likeCount,
                        ReactionType.Love => loveCount,
                        ReactionType.Laugh => laughCount,
                        ReactionType.Anger => angerCount,
                        _ => 0
                    };
                    var emoji = type switch
                    {
                        ReactionType.Like => "👍",
                        ReactionType.Love => "❤️",
                        ReactionType.Laugh => "😂",
                        ReactionType.Anger => "😡",
                        _ => ""
                    };
                    <button class="react-btn"
                            data-post="@post.Id"
                            data-type="@type"
                            style="background: none; border: none; cursor: pointer;@(userReaction?.Type == type ? " font-weight: bold;" : "")">
                        @emoji <span id="@type.ToString().ToLower()-@post.Id">@count</span>
                    </button>
                }

                <!-- Toggle Comments -->
                <button type="button"
                        onclick="toggleComments('comments-@post.Id')"
                        style="background: none; border: none; cursor: pointer; margin-left: auto;">
                    💬 <span>@comments.Count</span>
                </button>
            </div>

            <div style="margin-top: 10px; font-size: 0.8em;">
                <span>@($"{(DateTime.UtcNow - post.CreatedDate).Days} days ago")</span>
            </div>

            <!-- Comments Section -->
            <div id="comments-@post.Id" class="comments-dropdown" style="display: none; margin-top: 15px;">
                <div style="background-color: white; border-radius: 8px; padding: 10px;">
                    <div style="max-height: 200px; overflow-y: auto;">
                        @if (comments.Any())
                        {
                            foreach (var comment in comments)
                            {
                                var commentAuthor = UserRepository.GetUserByIdAsync(comment.UserId);
                                <div style="padding: 8px; border-bottom: 1px solid #eee;">
                                    <strong>@commentAuthor.Result.Username</strong><br />
                                    <span>@comment.Content</span><br />
                                    <small style="color: #777;">@comment.CreatedDate.ToString("MMM dd, yyyy hh:mm tt")</small>
                                </div>
                            }
                        }
                        else
                        {
                            <div style="text-align: center; color: #777;">No comments yet</div>
                        }
                    </div>

                    <!-- Add Comment Form -->
                    <form action="/comments/create" method="post" class="comment-form">
                        <input type="hidden" name="PostId" value="@post.Id" />
                        <input type="text" name="Content" placeholder="Add a comment..." required style="width: 80%; margin-right: 5px;" />
                        <button type="submit" style="background-color: #00ADB5; color: white;">Post</button>
                    </form>
                </div>
            </div>
        </div>
        }

        <!-- Pagination -->
        <div style="text-align: center; margin-top: 20px;">
            @if (page > 1)
            {
                <a class="btn btn-secondary" href="?page=@(page - 1)">Previous</a>
            }
            @if (page < totalPages)
            {
                <a class="btn btn-secondary" href="?page=@(page + 1)">Next</a>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleComments(id) {
            const section = document.getElementById(id);
            section.style.display = section.style.display === "none" ? "block" : "none";
        }

        document.querySelectorAll('.react-btn').forEach(btn => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const postId = this.getAttribute('data-post');
                const type = this.getAttribute('data-type');
                fetch('/posts/react', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `postId=${postId}&type=${type}`
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        ['like', 'love', 'laugh', 'anger'].forEach(rt => {
                            document.getElementById(`${rt}-${postId}`).textContent = data[rt];
                        });

                        document.querySelectorAll(`.react-btn[data-post="${postId}"]`).forEach(btn => {
                            btn.style.fontWeight = 'normal';
                        });
                        this.style.fontWeight = 'bold';
                    }
                });
            });
        });

        // Comment form AJAX submission could be added here if needed
    </script>
}
