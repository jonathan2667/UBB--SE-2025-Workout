@model Workout.Web.ViewModels.Statistics.StatisticsDashboardViewModel
@{
    ViewData["Title"] = "Nutrition & Water Statistics";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="h3 mb-4">
                <i class="fas fa-chart-line me-2"></i>
                Nutrition & Water Statistics
            </h1>
        </div>
    </div>

    <!-- Today's Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <i class="fas fa-fire text-danger me-2"></i>
                        <h5 class="card-title mb-0">Calories Today</h5>
                    </div>
                    <h2 class="text-primary">@Model.TodayNutrition.TotalCalories</h2>
                    <small class="text-muted">@Model.TodayNutrition.MealsConsumed meals logged</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <i class="fas fa-tint text-info me-2"></i>
                        <h5 class="card-title mb-0">Water Today</h5>
                    </div>
                    <h2 class="text-info">@Model.TodayWaterIntake ml</h2>
                    <div class="progress mt-2" style="height: 8px;">
                        <div class="progress-bar bg-info" role="progressbar" 
                             style="width: @Model.WaterProgress%" 
                             aria-valuenow="@Model.WaterProgress" 
                             aria-valuemin="0" 
                             aria-valuemax="100"></div>
                    </div>
                    <small class="text-muted">@Model.WaterProgress.ToString("F1")% of @Model.WaterGoal ml goal</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <i class="fas fa-dumbbell text-success me-2"></i>
                        <h5 class="card-title mb-0">Protein</h5>
                    </div>
                    <h2 class="text-success">@Model.TodayNutrition.TotalProteins.ToString("F1")g</h2>
                    <small class="text-muted">@Model.TodayProteinPercentage.ToString("F1")% of calories</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <i class="fas fa-check-circle @(Model.IsOnTrackNutrition && Model.IsOnTrackWater ? "text-success" : "text-warning") me-2"></i>
                        <h5 class="card-title mb-0">Status</h5>
                    </div>
                    <h6 class="@(Model.IsOnTrackNutrition && Model.IsOnTrackWater ? "text-success" : "text-warning")">
                        @(Model.IsOnTrackNutrition && Model.IsOnTrackWater ? "On Track" : "Needs Attention")
                    </h6>
                    <small class="text-muted">
                        Nutrition: @(Model.IsOnTrackNutrition ? "✓" : "⚠")<br>
                        Water: @(Model.IsOnTrackWater ? "✓" : "⚠")
                    </small>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Nutrition Details -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-pie me-2"></i>
                        Today's Nutrition Breakdown
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <canvas id="macroChart" width="300" height="300"></canvas>
                        </div>
                        <div class="col-md-6">
                            <div class="nutrition-details">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span><i class="fas fa-circle text-primary me-2"></i>Proteins</span>
                                    <span><strong>@Model.TodayNutrition.TotalProteins.ToString("F1")g</strong></span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span><i class="fas fa-circle text-success me-2"></i>Carbohydrates</span>
                                    <span><strong>@Model.TodayNutrition.TotalCarbohydrates.ToString("F1")g</strong></span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span><i class="fas fa-circle text-warning me-2"></i>Fats</span>
                                    <span><strong>@Model.TodayNutrition.TotalFats.ToString("F1")g</strong></span>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span><strong>Total Calories</strong></span>
                                    <span><strong>@Model.TodayNutrition.TotalCalories</strong></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Nutrition Trends Chart -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        7-Day Nutrition Trends
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="trendsChart" height="100"></canvas>
                </div>
            </div>
        </div>

        <!-- Water Tracking & Quick Actions -->
        <div class="col-lg-4">
            <!-- Water Tracker -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-tint me-2"></i>
                        Water Tracker
                    </h5>
                </div>
                <div class="card-body">
                    <div class="text-center mb-3">
                        <div class="water-progress-circle position-relative d-inline-block">
                            <canvas id="waterProgressChart" width="120" height="120"></canvas>
                            <div class="position-absolute top-50 start-50 translate-middle text-center">
                                <div class="h4 mb-0 text-info" id="waterPercentage">@Model.WaterProgress.ToString("F0")%</div>
                                <small class="text-muted">of goal</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="text-center mb-3">
                        <span id="currentWaterIntake">@Model.TodayWaterIntake</span> / @Model.WaterGoal ml
                    </div>

                    <!-- Quick Add Buttons -->
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-info btn-sm" onclick="addWater(250)">
                            <i class="fas fa-plus me-1"></i> +250ml
                        </button>
                        <button class="btn btn-outline-info btn-sm" onclick="addWater(500)">
                            <i class="fas fa-plus me-1"></i> +500ml
                        </button>
                        <button class="btn btn-outline-info btn-sm" onclick="addWater(1000)">
                            <i class="fas fa-plus me-1"></i> +1000ml
                        </button>
                    </div>

                    <!-- Custom Amount -->
                    <div class="mt-3">
                        <div class="input-group input-group-sm">
                            <input type="number" class="form-control" id="customWaterAmount" placeholder="Custom amount" min="1" max="2000">
                            <button class="btn btn-info" type="button" onclick="addCustomWater()">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Today's Meals -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-utensils me-2"></i>
                        Today's Meals
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.TodayMealLogs.Any())
                    {
                        @foreach (var mealLog in Model.TodayMealLogs)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                                <div>
                                    <strong>@(mealLog.Meal?.Name ?? "Unknown Meal")</strong>
                                    @if (mealLog.PortionMultiplier != 1.0)
                                    {
                                        <small class="text-muted">(x@mealLog.PortionMultiplier.ToString("F1"))</small>
                                    }
                                    <br>
                                    <small class="text-muted">@mealLog.ConsumedAt.ToString("HH:mm")</small>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">
                                        @((mealLog.Meal?.Calories * mealLog.PortionMultiplier ?? 0).ToString("F0")) cal
                                    </small>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center">No meals logged today</p>
                    }
                    
                    <div class="text-center mt-3">
                        <a href="@Url.Action("Index", "Meal")" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-plus me-1"></i> Log Meal
                        </a>
                    </div>
                </div>
            </div>

            <!-- Top Meal Types -->
            @if (Model.TopMealTypes.Any())
            {
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-0">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-star me-2"></i>
                            Favorite Meal Types (30 days)
                        </h5>
                    </div>
                    <div class="card-body">
                        @foreach (var mealType in Model.TopMealTypes.Take(5))
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>@mealType.Key</span>
                                <span class="badge bg-primary">@mealType.Value</span>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Macro Pie Chart
        const macroCtx = document.getElementById('macroChart').getContext('2d');
        const macroChart = new Chart(macroCtx, {
            type: 'doughnut',
            data: {
                labels: ['Proteins', 'Carbohydrates', 'Fats'],
                datasets: [{
                    data: [@Model.TodayNutrition.TotalProteins, @Model.TodayNutrition.TotalCarbohydrates, @Model.TodayNutrition.TotalFats],
                    backgroundColor: ['#0d6efd', '#198754', '#ffc107'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

        // Water Progress Chart
        const waterCtx = document.getElementById('waterProgressChart').getContext('2d');
        const waterChart = new Chart(waterCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [@Model.WaterProgress, 100 - @Model.WaterProgress],
                    backgroundColor: ['#0dcaf0', '#e9ecef'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: false,
                cutout: '80%',
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

        // Nutrition Trends Chart
        const trendsCtx = document.getElementById('trendsChart').getContext('2d');
        const trendsChart = new Chart(trendsCtx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.NutritionTrends.Select(n => $"'{n.Date:MM/dd}'")))],
                datasets: [{
                    label: 'Calories',
                    data: [@Html.Raw(string.Join(",", Model.NutritionTrends.Select(n => n.TotalCalories)))],
                    borderColor: '#dc3545',
                    backgroundColor: 'rgba(220, 53, 69, 0.1)',
                    tension: 0.4
                }, {
                    label: 'Water (ml)',
                    data: [@Html.Raw(string.Join(",", Model.NutritionTrends.Select(n => n.WaterIntakeMl)))],
                    borderColor: '#0dcaf0',
                    backgroundColor: 'rgba(13, 202, 240, 0.1)',
                    tension: 0.4,
                    yAxisID: 'y1'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Calories'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Water (ml)'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                }
            }
        });

        // Water tracking functions
        function addWater(amount) {
            fetch('@Url.Action("AddWater", "Statistics")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: `amount=${amount}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateWaterDisplay(data.totalIntake, data.progress);
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error adding water intake', 'error');
            });
        }

        function addCustomWater() {
            const amount = document.getElementById('customWaterAmount').value;
            if (amount && amount > 0) {
                addWater(parseInt(amount));
                document.getElementById('customWaterAmount').value = '';
            }
        }

        function updateWaterDisplay(totalIntake, progress) {
            document.getElementById('currentWaterIntake').textContent = totalIntake;
            document.getElementById('waterPercentage').textContent = Math.round(progress) + '%';
            
            // Update progress bar
            const progressBar = document.querySelector('.progress-bar');
            progressBar.style.width = progress + '%';
            progressBar.setAttribute('aria-valuenow', progress);
            
            // Update water chart
            waterChart.data.datasets[0].data = [progress, 100 - progress];
            waterChart.update();
        }

        function showToast(message, type) {
            // Simple toast notification
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Add CSRF token to all AJAX requests
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("RequestVerificationToken", $('input[name=__RequestVerificationToken]').val());
                }
            }
        });
    </script>
} 